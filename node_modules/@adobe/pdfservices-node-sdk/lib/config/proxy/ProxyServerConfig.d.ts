import { ProxyScheme } from "./ProxyScheme";
import { ProxyAuthenticationCredentials } from "./ProxyAuthenticationCredentials";
/**
 * Encapsulates the proxy server configurations.
 */
export declare class ProxyServerConfig {
    private readonly _host;
    private readonly _port;
    private readonly _scheme?;
    private readonly _credentials?;
    /**
     * Constructs a new `ProxyServerConfig` instance.
     *
     * @param params
     * Parameters for constructing a new {@link ProxyServerConfig} instance.
     * @param params.host
     * Host name of the proxy server. Cannot be undefined.
     * @param params.port
     * Port number of proxy server. It should be >= 0 and < 65536.
     * @param [params.scheme]
     * Scheme of proxy server.
     * See {@link ProxyScheme} for scheme values. Default value is {@link ProxyScheme#HTTP HTTP}.
     * @param [params.credentials]
     * Credentials for authenticating with the proxy server.
     */
    constructor(params: {
        host: string;
        port: number;
        scheme?: ProxyScheme;
        credentials?: ProxyAuthenticationCredentials;
    });
    /**
     * Gets the host name of proxy server.
     *
     * @returns A String denoting host
     */
    get host(): string;
    /**
     * Gets the port of proxy server.
     *
     * @returns An integer denoting port
     */
    get port(): number;
    /**
     * Gets the scheme of proxy server.
     *
     * @returns A {@link ProxyScheme} denoting scheme
     */
    get scheme(): ProxyScheme | undefined;
    /**
     * Gets the credentials for authenticating with a proxy server.
     *
     * @returns A {@link ProxyAuthenticationCredentials} denoting credentials
     */
    get credentials(): ProxyAuthenticationCredentials | undefined;
}
