import { HttpMethod } from "./HttpMethod";
import { AuthenticationMethod } from "../auth/AuthenticationMethod";
import { RequestKey } from "../constants/RequestKey";
import { Authenticator } from "../auth/Authenticator";
import { HttpRequestConfig } from "./HttpRequestConfig";
export declare class HttpBaseRequest {
    private _uriTemplate;
    private _httpMethod;
    private _authenticationMethod;
    private _requestKey;
    private _headers;
    private _authenticator?;
    private _httpRequestConfig?;
    private _data?;
    private _responseType?;
    constructor(params: {
        httpMethod: HttpMethod;
        uriTemplate?: string;
        requestKey: RequestKey;
        authenticationMethod: AuthenticationMethod;
        headers?: {
            [key: string]: string;
        };
        authenticator?: Authenticator;
        httpRequestConfig?: HttpRequestConfig;
        data?: object;
        responseType?: "arraybuffer" | "blob" | "document" | "json" | "text" | "stream";
    });
    get uriTemplate(): string;
    set uriTemplate(value: string);
    get httpMethod(): HttpMethod;
    set httpMethod(value: HttpMethod);
    get headers(): {
        [key: string]: string;
    };
    set headers(value: {
        [key: string]: string;
    });
    get authenticationMethod(): AuthenticationMethod;
    set authenticationMethod(value: AuthenticationMethod);
    get requestKey(): RequestKey;
    set requestKey(value: RequestKey);
    get httpRequestConfig(): HttpRequestConfig | undefined;
    set httpRequestConfig(value: HttpRequestConfig);
    get authenticator(): Authenticator | undefined;
    set authenticator(value: Authenticator);
    get data(): unknown;
    set data(value: unknown);
    get responseType(): "arraybuffer" | "blob" | "document" | "json" | "text" | "stream" | undefined;
    set responseType(value: "arraybuffer" | "blob" | "document" | "json" | "text" | "stream" | undefined);
    authenticate(): Promise<void>;
}
