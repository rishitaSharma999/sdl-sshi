"use strict";
/*
 * Copyright 2024 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectUtil = void 0;
const CustomErrorMessages_1 = require("../constants/CustomErrorMessages");
class ObjectUtil {
    static isUndefined(objectToCheck) {
        return objectToCheck === undefined;
    }
    static isNull(objectToCheck) {
        return objectToCheck === null;
    }
    static isUndefinedOrNull(objectToCheck) {
        return objectToCheck === undefined || objectToCheck === null;
    }
    static requireNonNullOrUndefined(objectToCheck, message) {
        if (this.isUndefinedOrNull(objectToCheck)) {
            throw new TypeError(`${message} ${CustomErrorMessages_1.CustomErrorMessages.GENERIC_CAN_NOT_BE_UNDEFINED_OR_NULL}`);
        }
    }
    static requireNonNull(objectToCheck, message) {
        if (this.isNull(objectToCheck)) {
            throw new TypeError(`${message} ${CustomErrorMessages_1.CustomErrorMessages.GENERIC_CAN_NOT_BE_NULL}`);
        }
    }
    static modifyRequest(request) {
        function removeUnderscoreFromKeys(obj) {
            if (typeof obj !== "object" || obj === null) {
                return obj;
            }
            if (Array.isArray(obj)) {
                return obj.map(removeUnderscoreFromKeys);
            }
            const result = {};
            for (const key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    const newKey = key.startsWith("_") ? key.slice(1) : key;
                    if (key === "_jsonDataForMerge") {
                        result[newKey] = obj[key];
                    }
                    else {
                        result[newKey] = removeUnderscoreFromKeys(obj[key]);
                    }
                }
            }
            return result;
        }
        return removeUnderscoreFromKeys(JSON.parse(JSON.stringify(request)));
    }
    static isValidNumber(value) {
        return typeof value === "number" && isFinite(value);
    }
    static requireValidNumber(value, message) {
        if (!this.isValidNumber(value)) {
            throw new TypeError(`${message} ${CustomErrorMessages_1.CustomErrorMessages.GENERIC_VALID_NUMBER}. Provided ${value}`);
        }
    }
    static isValidPositiveNumber(value) {
        return typeof value === "number" && isFinite(value) && value > 0;
    }
    static requireValidPositiveNumber(value, message) {
        if (!this.isValidPositiveNumber(value)) {
            throw new TypeError(`${message} ${CustomErrorMessages_1.CustomErrorMessages.GENERIC_VALID_POSITIVE_NUMBER}. Provided ${value}`);
        }
    }
    static isValidNonNegativeNumber(value) {
        return typeof value === "number" && isFinite(value) && value >= 0;
    }
    static requireValidNonNegativeNumber(value, message) {
        if (!this.isValidNonNegativeNumber(value)) {
            throw new TypeError(`${message} ${CustomErrorMessages_1.CustomErrorMessages.GENERIC_VALID_NON_NEGATIVE_NUMBER}. Provided ${value}`);
        }
    }
    static isValidInteger(value) {
        return typeof value === "number" && Number.isInteger(value);
    }
    static requireValidInteger(value, message) {
        if (!this.isValidInteger(value)) {
            throw new TypeError(`${message} ${CustomErrorMessages_1.CustomErrorMessages.GENERIC_VALID_INTEGER}. Provided ${value}`);
        }
    }
    static isValidNonNegativeInteger(value) {
        return typeof value === "number" && Number.isInteger(value) && value >= 0;
    }
    static requireValidNonNegativeInteger(value, message) {
        if (!this.isValidNonNegativeInteger(value)) {
            throw new TypeError(`${message} ${CustomErrorMessages_1.CustomErrorMessages.GENERIC_VALID_NON_NEGATIVE_INTEGER}. Provided ${value}`);
        }
    }
    static isValidPositiveInteger(value) {
        return typeof value === "number" && Number.isInteger(value) && value > 0;
    }
    static requireValidPositiveInteger(value, message) {
        if (!this.isValidPositiveInteger(value)) {
            throw new TypeError(`${message} ${CustomErrorMessages_1.CustomErrorMessages.GENERIC_VALID_POSITIVE_INTEGER}. Provided ${value}`);
        }
    }
}
exports.ObjectUtil = ObjectUtil;
//# sourceMappingURL=ObjectUtil.js.map