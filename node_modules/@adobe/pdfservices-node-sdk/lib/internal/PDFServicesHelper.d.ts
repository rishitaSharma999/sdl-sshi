/// <reference types="node" />
import { ExecutionContext } from "./ExecutionContext";
import { HttpBaseResponse } from "./http/HttpBaseResponse";
import { PDFServicesApiRequest } from "./dto/request/PDFServicesApiRequest";
import { OperationHeaderInfoEndpointMap } from "./constants/OperationHeaderInfoEndpointMap";
import { PDFServicesResponse } from "../PDFServicesResponse";
import { PDFServicesJobStatusResponse } from "../PDFServicesJobStatusResponse";
import { StreamAsset } from "../io/StreamAsset";
import { Asset } from "../io/Asset";
export declare class PDFServicesHelper {
    static upload(context: ExecutionContext, readStream: NodeJS.ReadableStream, mediaType: string): Promise<Asset>;
    static submitJob(context: ExecutionContext, pdfServicesAPIRequest: PDFServicesApiRequest, xRequestId: string, operationHeaderInfoEndpointMap: OperationHeaderInfoEndpointMap): Promise<HttpBaseResponse<string>>;
    static getJobResult<T>(context: ExecutionContext, location: string, resultType: new (...args: any[]) => T): Promise<PDFServicesResponse<T>>;
    static getJobStatus(context: ExecutionContext, pollingURL: string): Promise<PDFServicesJobStatusResponse>;
    static getContent(context: ExecutionContext, asset: Asset): Promise<StreamAsset>;
    static deleteAsset(context: ExecutionContext, asset: Asset): Promise<void>;
    static refreshDownloadURI(context: ExecutionContext, asset: Asset): Promise<Asset>;
    private static createPreSignedUri;
    private static uploadAsset;
    private static fetchExtractContentJSON;
    private static pollJob;
    private static sleep;
    private static getSingleAssetResultClasses;
}
