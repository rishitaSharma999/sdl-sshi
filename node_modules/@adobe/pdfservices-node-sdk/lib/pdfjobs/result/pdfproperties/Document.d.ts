import { InfoDict } from "./InfoDict";
import { Font } from "./Font";
/**
 * This class provides information about the document level properties of the specified PDF file, such as tags,
 * fonts, PDF Version etc.
 */
export declare class Document {
    private readonly _isLinearized?;
    private readonly _pdfeComplianceLevel?;
    private readonly _isTagged?;
    private readonly _isPortfolio?;
    private readonly _isCertified?;
    private readonly _isEncrypted?;
    private readonly _infoDict?;
    private readonly _isFTPDF?;
    private readonly _pdfVersion?;
    private readonly _hasAcroform?;
    private readonly _fileSize?;
    private readonly _isSigned?;
    private readonly _incrementalSaveCount?;
    private readonly _hasEmbeddedFiles?;
    private readonly _isXFA?;
    private readonly _fonts?;
    private readonly _pdfaComplianceLevel?;
    private readonly _pdfvtComplianceLevel?;
    private readonly _pdfxComplianceLevel?;
    private readonly _pdfuaComplianceLevel?;
    private readonly _xmp?;
    private readonly _pageCount?;
    /**
     * Returns a boolean specifying whether the specified PDF file is linearized.
     *
     * @returns `true` if the specified PDF file is linearized. False otherwise.
     */
    get isLinearized(): boolean | undefined;
    /**
     * Returns a string specifying the PDF/E compliance level for the specified PDF file - e.g. "PDF/E-1" etc.
     *
     * @returns A String denoting the PDF/E compliance level for the specified PDF file.
     */
    get pdfEComplianceLevel(): string | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file is tagged.
     *
     * @returns `true` if the specified PDF file is tagged. False otherwise.
     */
    get isTagged(): boolean | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file is a portfolio PDF.
     *
     * @returns `true` if the specified PDF file is a portfolio PDF. False otherwise.
     */
    get isPortfolio(): boolean | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file has been digitally signed with a certifying
     * signature.
     *
     * @returns `true` if the specified PDF file has been digitally signed with a certifying signature. False
     * otherwise.
     */
    get isCertified(): boolean | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file is encrypted.
     *
     * @returns `true` if the specified PDF file is encrypted. False otherwise.
     */
    get isEncrypted(): boolean | undefined;
    /**
     * Returns an {@link InfoDict} instance that specifies information related to the specified PDF file such as
     * creation date, author etc.
     *
     * @returns an {@link InfoDict} instance.
     */
    get infoDict(): InfoDict | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file is a Fully Tagged PDF.
     *
     * @returns `true` if the specified PDF file is a Fully Tagged PDF. False otherwise.
     */
    get isFullyTaggedPDF(): boolean | undefined;
    /**
     * Returns a string specifying the version of the specified PDF file - e.g. "1.7", "2.0" etc.
     *
     * @returns A String denoting the version of the specified PDF file.
     */
    get pdfVersion(): string | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file contains any form fields.
     *
     * @returns `true` if the specified PDF file contains any form fields. False otherwise.
     */
    get isAcroform(): boolean | undefined;
    /**
     * Returns the size of the specified PDF file.
     *
     * @returns A String denoting the size of the specified PDF file.
     */
    get fileSize(): string | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file is digitally signed.
     *
     * @returns `true` if the specified PDF file is digitally signed. False otherwise.
     */
    get isSigned(): boolean | undefined;
    /**
     * Returns the count of the number of times the specified PDF file is edited and saved.
     *
     * @returns An Integer denoting the count of the number of times the specified PDF file is edited and saved.
     */
    get incrementalSaveCount(): number | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file contains any embedded files.
     *
     * @returns `true` if the specified PDF file contains any embedded files. False otherwise.
     */
    get containsEmbeddedFiles(): boolean | undefined;
    /**
     * Returns a boolean specifying whether the specified PDF file is based on the XFA (Extensible Forms
     * Architecture) format.
     *
     * @returns `true` if the specified PDF file is based on the XFA format. False otherwise
     */
    get isXFA(): boolean | undefined;
    /**
     * Returns a list of {@link Font} instances present in the specified PDF file.
     *
     * @returns A List of {@link Font} instances
     */
    get fonts(): Font[] | undefined;
    /**
     * Returns a string specifying the PDF/A compliance level for the specified PDF file - e.g "PDF/A-4" etc.
     *
     * @returns A String denoting the PDF/A compliance level for the specified PDF file.
     */
    get pdfAComplianceLevel(): string | undefined;
    /**
     * Returns a string specifying the PDF/VT compliance level for the specified PDF file - e.g. "PDF/VT-3" etc.
     *
     * @returns A String denoting the PDF/VT compliance level for the specified PDF file.
     */
    get pdfVTComplianceLevel(): string | undefined;
    /**
     * Returns a string specifying the PDF/X compliance level for the specified PDF file - e.g. "PDF/X-4" etc.
     *
     * @returns A String denoting the PDF/X compliance level for the specified PDF file.
     */
    get pdfXComplianceLevel(): string | undefined;
    /**
     * Returns a string specifying the PDF/UA compliance level for the specified PDF file - e.g. "PDF/UA-1" etc.
     *
     * @returns A String denoting the PDF/UA compliance level for the specified PDF file.
     */
    get pdfUAComplianceLevel(): string | undefined;
    /**
     * Returns a string specifying the full metadata of the specified PDF file as provided by the author and producer
     * of the document.
     *
     * @returns A String denoting the full metadata of the specified PDF file as provided by the author and producer
     * of the document.
     */
    get xmpMetadata(): string | undefined;
    /**
     * Returns a number specifying the number of pages in the specified PDF file.
     *
     * @returns An Integer denoting the number of pages in the specified PDF file.
     */
    get pageCount(): number | undefined;
}
