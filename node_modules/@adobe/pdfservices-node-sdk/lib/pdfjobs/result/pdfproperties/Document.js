"use strict";
/*
 * Copyright 2024 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Document = void 0;
/**
 * This class provides information about the document level properties of the specified PDF file, such as tags,
 * fonts, PDF Version etc.
 */
class Document {
    /**
     * Returns a boolean specifying whether the specified PDF file is linearized.
     *
     * @returns `true` if the specified PDF file is linearized. False otherwise.
     */
    get isLinearized() {
        return this._isLinearized;
    }
    /**
     * Returns a string specifying the PDF/E compliance level for the specified PDF file - e.g. "PDF/E-1" etc.
     *
     * @returns A String denoting the PDF/E compliance level for the specified PDF file.
     */
    get pdfEComplianceLevel() {
        return this._pdfeComplianceLevel;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file is tagged.
     *
     * @returns `true` if the specified PDF file is tagged. False otherwise.
     */
    get isTagged() {
        return this._isTagged;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file is a portfolio PDF.
     *
     * @returns `true` if the specified PDF file is a portfolio PDF. False otherwise.
     */
    get isPortfolio() {
        return this._isPortfolio;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file has been digitally signed with a certifying
     * signature.
     *
     * @returns `true` if the specified PDF file has been digitally signed with a certifying signature. False
     * otherwise.
     */
    get isCertified() {
        return this._isCertified;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file is encrypted.
     *
     * @returns `true` if the specified PDF file is encrypted. False otherwise.
     */
    get isEncrypted() {
        return this._isEncrypted;
    }
    /**
     * Returns an {@link InfoDict} instance that specifies information related to the specified PDF file such as
     * creation date, author etc.
     *
     * @returns an {@link InfoDict} instance.
     */
    get infoDict() {
        return this._infoDict;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file is a Fully Tagged PDF.
     *
     * @returns `true` if the specified PDF file is a Fully Tagged PDF. False otherwise.
     */
    get isFullyTaggedPDF() {
        return this._isFTPDF;
    }
    /**
     * Returns a string specifying the version of the specified PDF file - e.g. "1.7", "2.0" etc.
     *
     * @returns A String denoting the version of the specified PDF file.
     */
    get pdfVersion() {
        return this._pdfVersion;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file contains any form fields.
     *
     * @returns `true` if the specified PDF file contains any form fields. False otherwise.
     */
    get isAcroform() {
        return this._hasAcroform;
    }
    /**
     * Returns the size of the specified PDF file.
     *
     * @returns A String denoting the size of the specified PDF file.
     */
    get fileSize() {
        return this._fileSize;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file is digitally signed.
     *
     * @returns `true` if the specified PDF file is digitally signed. False otherwise.
     */
    get isSigned() {
        return this._isSigned;
    }
    /**
     * Returns the count of the number of times the specified PDF file is edited and saved.
     *
     * @returns An Integer denoting the count of the number of times the specified PDF file is edited and saved.
     */
    get incrementalSaveCount() {
        return this._incrementalSaveCount;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file contains any embedded files.
     *
     * @returns `true` if the specified PDF file contains any embedded files. False otherwise.
     */
    get containsEmbeddedFiles() {
        return this._hasEmbeddedFiles;
    }
    /**
     * Returns a boolean specifying whether the specified PDF file is based on the XFA (Extensible Forms
     * Architecture) format.
     *
     * @returns `true` if the specified PDF file is based on the XFA format. False otherwise
     */
    get isXFA() {
        return this._isXFA;
    }
    /**
     * Returns a list of {@link Font} instances present in the specified PDF file.
     *
     * @returns A List of {@link Font} instances
     */
    get fonts() {
        return this._fonts;
    }
    /**
     * Returns a string specifying the PDF/A compliance level for the specified PDF file - e.g "PDF/A-4" etc.
     *
     * @returns A String denoting the PDF/A compliance level for the specified PDF file.
     */
    get pdfAComplianceLevel() {
        return this._pdfaComplianceLevel;
    }
    /**
     * Returns a string specifying the PDF/VT compliance level for the specified PDF file - e.g. "PDF/VT-3" etc.
     *
     * @returns A String denoting the PDF/VT compliance level for the specified PDF file.
     */
    get pdfVTComplianceLevel() {
        return this._pdfvtComplianceLevel;
    }
    /**
     * Returns a string specifying the PDF/X compliance level for the specified PDF file - e.g. "PDF/X-4" etc.
     *
     * @returns A String denoting the PDF/X compliance level for the specified PDF file.
     */
    get pdfXComplianceLevel() {
        return this._pdfxComplianceLevel;
    }
    /**
     * Returns a string specifying the PDF/UA compliance level for the specified PDF file - e.g. "PDF/UA-1" etc.
     *
     * @returns A String denoting the PDF/UA compliance level for the specified PDF file.
     */
    get pdfUAComplianceLevel() {
        return this._pdfuaComplianceLevel;
    }
    /**
     * Returns a string specifying the full metadata of the specified PDF file as provided by the author and producer
     * of the document.
     *
     * @returns A String denoting the full metadata of the specified PDF file as provided by the author and producer
     * of the document.
     */
    get xmpMetadata() {
        return this._xmp;
    }
    /**
     * Returns a number specifying the number of pages in the specified PDF file.
     *
     * @returns An Integer denoting the number of pages in the specified PDF file.
     */
    get pageCount() {
        return this._pageCount;
    }
}
exports.Document = Document;
//# sourceMappingURL=Document.js.map