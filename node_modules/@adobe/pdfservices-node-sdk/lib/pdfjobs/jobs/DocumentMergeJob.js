"use strict";
/*
 * Copyright 2024 Adobe
 * All Rights Reserved.
 *
 * NOTICE: Adobe permits you to use, modify, and distribute this file in
 * accordance with the terms of the Adobe license agreement accompanying
 * it. If you have received this file from a source other than Adobe,
 * then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentMergeJob = void 0;
const uuid_1 = require("uuid");
const PDFServicesJob_1 = require("./PDFServicesJob");
const ValidationUtil_1 = require("../../internal/util/ValidationUtil");
const OperationHeaderInfoEndpointMap_1 = require("../../internal/constants/OperationHeaderInfoEndpointMap");
const DefaultRequestHeaders_1 = require("../../internal/http/DefaultRequestHeaders");
const CloudAsset_1 = require("../../io/CloudAsset");
const DocumentMergeInternalAssetRequest_1 = require("../../internal/dto/request/documentmerge/DocumentMergeInternalAssetRequest");
const DocumentMergeExternalAssetRequest_1 = require("../../internal/dto/request/documentmerge/DocumentMergeExternalAssetRequest");
const PDFServicesHelper_1 = require("../../internal/PDFServicesHelper");
/**
 * A job that enables the clients to produce high fidelity PDF and Word documents with dynamic data inputs.
 * This operation merges the JSON data with the Word template to create dynamic documents for contracts and
 * agreements, invoices, proposals, reports, forms, branded marketing documents and more.
 * <p>
 * To know more about document generation and document templates, please see the
 * <a href="http://www.adobe.com/go/dcdocgen_overview_doc" target="_blank">documentation</a>
 * <p>
 *
 * @example
 * Sample Usage:
 * ```js
 *         const readStream = fs.createReadStream("<SOURCE_PATH>");
 *
 *         const credentials = new ServicePrincipalCredentials({
 *             clientId: process.env.PDF_SERVICES_CLIENT_ID,
 *             clientSecret: process.env.PDF_SERVICES_CLIENT_SECRET
 *         });
 *
 *         const pdfServices = new PDFServices({credentials});
 *
 *         const inputAsset = await pdfServices.upload({
 *             readStream,
 *             mimeType: MimeType.DOCX
 *         });
 *
 *         const jsonDataForMerge = JSON.parse("{\"customerName\": \"James\", \"customerVisits\": 100}");
 *
 *         const params = new DocumentMergeParams({
 *             jsonDataForMerge,
 *             outputFormat: OutputFormat.DOCX
 *         });
 *
 *         const job = new DocumentMergeJob({inputAsset, params});
 *
 *         const pollingURL = await pdfServices.submit({job});
 *
 *         const pdfServicesResponse = await pdfServices.getJobResult({
 *             pollingURL,
 *             resultType: DocumentMergeResult
 *         });
 *
 *         const resultAsset = pdfServicesResponse.result.asset;
 *         const streamAsset = await pdfServices.getContent({asset: resultAsset});
 * ```
 */
class DocumentMergeJob extends PDFServicesJob_1.PDFServicesJob {
    /**
     * Constructs a new `DocumentMergeJob` instance.
     *
     * @param params The parameters for constructing an instance of `DocumentMergeJob`.
     * @param params.inputAsset {@link Asset} object containing the input file. Cannot be undefined.
     * @param params.params {@link DocumentMergeParams} object containing the parameters for document
     * generation. Cannot be undefined.
     * @param [params.outputAsset] {@link Asset} object representing the output asset.
     * @remarks External assets can be set as output only when input is external asset as well.
     */
    constructor(params) {
        super();
        ValidationUtil_1.ValidationUtil.validateDocumentMergeJobParams(params);
        this._inputAsset = params.inputAsset;
        this._documentMergeParams = params.params;
        this._outputAsset = params.outputAsset;
    }
    /**
     * @hidden
     */
    async process(executionContext, notifierConfigList) {
        this.validate(executionContext);
        const documentMergeRequest = this.generatePDFServicesAPIRequest(notifierConfigList), xRequestId = (0, uuid_1.v4)(), response = await PDFServicesHelper_1.PDFServicesHelper.submitJob(executionContext, documentMergeRequest, xRequestId, OperationHeaderInfoEndpointMap_1.OperationHeaderInfoEndpointMap.MERGE_DOCUMENT);
        return response.headers[DefaultRequestHeaders_1.DefaultRequestHeaders.LOCATION_HEADER_NAME];
    }
    generatePDFServicesAPIRequest(notifierConfigList) {
        let documentMergeRequest;
        if (this._inputAsset instanceof CloudAsset_1.CloudAsset) {
            documentMergeRequest = new DocumentMergeInternalAssetRequest_1.DocumentMergeInternalAssetRequest(this._inputAsset.assetId, this._documentMergeParams, notifierConfigList);
        }
        else {
            documentMergeRequest = new DocumentMergeExternalAssetRequest_1.DocumentMergeExternalAssetRequest(this._inputAsset, this._documentMergeParams, this._outputAsset, notifierConfigList);
        }
        return documentMergeRequest;
    }
}
exports.DocumentMergeJob = DocumentMergeJob;
//# sourceMappingURL=DocumentMergeJob.js.map