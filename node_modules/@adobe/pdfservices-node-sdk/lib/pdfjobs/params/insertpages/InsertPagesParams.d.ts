import { PDFServicesJobParams } from "../PDFServicesJobParams";
import { CombinePDFJobInput } from "../../../internal/params/CombinePDFJobInput";
import { Asset } from "../../../io/Asset";
import { PageRanges } from "../PageRanges";
/**
 * Parameters for inserting pages into a PDF using {@link InsertPagesJob}.
 */
export declare class InsertPagesParams implements PDFServicesJobParams {
    private readonly _assetsToInsert;
    private readonly _baseAsset;
    /**
     * Constructs a new `InsertPagesParams` instance.
     *
     * @param baseAsset the base asset to insert pages into.
     */
    constructor(baseAsset: Asset);
    /**
     * @internal Used internally by this SDK, not intended to be called by clients.
     */
    get assetsToInsert(): Map<number, CombinePDFJobInput[]>;
    /**
     * Returns the base asset to insert pages into.
     *
     * @returns the base asset to insert pages into.
     */
    get baseAsset(): Asset;
    /**
     * Adds the specified pages of the input PDF file to be inserted at the specified page of the base PDF file.
     *
     * This method can be invoked multiple times with the same or different input PDF files.
     *
     * @param params - The parameters for adding pages to insert at.
     * @param params.inputAsset - The PDF file for insertion. Cannot be undefined.
     * @param [params.pageRanges] - The page ranges of the input PDF file. If not specified, all pages are included.
     * @param params.basePage - The page of the base PDF file. Cannot be undefined.
     * @returns this `InsertPagesParams` instance.
     */
    addPagesToInsertAt(params: {
        inputAsset: Asset;
        pageRanges?: PageRanges;
        basePage: number;
    }): InsertPagesParams;
    private updateFilesToInsert;
    /**
     * @hidden
     */
    validate(): void;
}
