import { CertificateCredentials } from "./CertificateCredentials";
import { CSCAuthContext } from "./CSCAuthContext";
/**
 * Parameters for representing the CSC Provider based credentials as a subtype
 * for {@link CertificateCredentials}.
 */
export declare class CSCCredential extends CertificateCredentials {
    private readonly _providerName;
    private readonly _credentialId;
    private readonly _pin;
    private readonly _authorizationContext;
    /**
     * Constructs a new `CSCCredential` instance.
     *
     * @param params - The parameters for constructing an instance of `CSCCredential`.
     * @param params.providerName - The name of the Trust Service Provider to be used for applying electronic seal.
     * Cannot be undefined.
     * @param params.credentialId - The digital ID stored with the TSP provider to be used for applying electronic seal.
     * Cannot be undefined.
     * @param params.pin - The pin associated with the credential ID. Cannot be undefined.
     * @param params.authorizationContext - The service authorization data required to communicate with the TSP.
     * Cannot be undefined.
     */
    constructor(params: {
        providerName: string;
        credentialId: string;
        pin: string;
        authorizationContext: CSCAuthContext;
    });
    /**
     * Returns the name of the Trust Service Provider to be used for applying electronic seal.
     *
     * @returns the name of the Trust Service Provider.
     */
    get providerName(): string;
    /**
     * Returns the digital ID stored with the TSP provider to be used for applying electronic seal.
     *
     * @returns the digital ID stored with the TSP provider.
     */
    get credentialID(): string;
    /**
     * Returns the pin associated with the credential ID.
     *
     * @returns the pin associated with the credential ID.
     */
    get pin(): string;
    /**
     * Returns the service authorization data required to communicate with the TSP.
     *
     * @returns the service authorization data required to communicate with the TSP.
     */
    get authorizationContext(): CSCAuthContext;
}
